"" Based on:
""
"" https://www.cyberwizard.io/posts/the-ultimate-ideavim-setup/


"" Base Settings
"" ========================================================

set scrolloff=10
set linenumber
set relativenumber
set showmode
set showcmd

set smartcase
set incsearch
set hlsearch

set visualbell

" Use system clipboard
set clipboard+=unnamed

let mapleader = " "


"" Plugin Settings
"" ========================================================

set surround
set highlightedyank
set sneak
set nerdtree

" Easymotion settings
set easymotion
set notimeout

" Which-key settings
set which-key
let g:WhichKey_FontSize = 16
let g:WhichKey_CommandColor = "#41ead4"
let g:WhichKey_PrefixColor = "#f335b2"
let g:WhichKey_SortOrder = "by_key_prefix_first"

" The key `g` lists all keys
let g:WhichKey_ShowVimActions = "true"

let g:WhichKeyDesc_leader = "<leader> Leader key"

"" Key mappings
"" ========================================================

" inoremap jk <Esc>

" Tab navigation
nmap <C-n> <Action>(NextTab)
nmap <C-p> <Action>(PreviousTab)
sethandler <C-n> a:vim
sethandler <C-p> a:vim

" Pane navigation
nnoremap <C-h> <C-w>h
nnoremap <C-l> <C-w>l
nnoremap <C-k> <C-w>k
nnoremap <C-j> <C-w>h
sethandler <C-h> a:vim
sethandler <C-l> a:vim
sethandler <C-k> a:vim
sethandler <C-j> a:vim

" Jump between methods
nmap [[ <Action>(MethodUp)
nmap ]] <Action>(MethodDown)

" Easy visual indentation
vnoremap < <gv
vnoremap > >gv

" Execute macro saved in 'q' register
nnoremap qj @q

" IDE interaction
nmap <C-m> <Action>(ShowPopupMenu)
nmap <C-S-m> <Action>(ToolWindowsGroup)
sethandler <C-m> a:vim
sethandler <C-S-m> a:vim

" Popup navigation
inoremap <C-j> <Action>(PopupMenu-selectNext)
inoremap <C-k> <Action>(PopupMenu-selectPrev)


"" Leader commands
"" ========================================================

" Comment lines -------------------------------------------
map <leader>c <Action>(CommentByLineComment)

let g:WhichKeyDesc_comment = "<leader>c Comment line"

" Jump around with easymotion -----------------------------
map s <Plug>(easymotion-s)

let g:WhichKeyDesc_easymotion = "s Jump with Easymotion"
" let g:WhichKeyDesc_easymotion_prefix = "<leader><leader>"

" Open NERDTree (use q to exit) ---------------------------
map <leader>x :NERDTreeToggle<CR>

let g:WhichKeyDesc_NerdTree_toggle = "<leader>x Toggle NerdTree (Solution Explorer)"

" Folding -------------------------------------------------
map <leader>zc <Action>(CollapseAllRegions)
map <leader>zo <Action>(ExpandAllRegions)

let g:WhichKeyDesc_fold = "<leader>z Folding"
let g:WhichKeyDesc_fold_all = "<leader>zc Fold all regions"
let g:WhichKeyDesc_unfold_all = "<leader>zo Unfold all regions"

" Window splits -------------------------------------------
map <leader>wv <Action>(SplitVertically)
map <leader>wh <Action>(SplitHorizontally)
map <leader>wu <Action>(Unsplit)
map <leader>wm <Action>(MoveEditorToOppositeTabGroup)

let g:WhichKeyDesc_window = "<leader>w Window splits"
let g:WhichKeyDesc_window_split_vertically = "<leader>wv Split vertically"
let g:WhichKeyDesc_window_split_horizontally = "<leader>wh Split horizontally"
let g:WhichKeyDesc_window_split_unsplit = "<leader>wu Unsplit"
let g:WhichKeyDesc_window_split_move_editor = "<leader>wm Move editor to opposite tab group"

" Display options -----------------------------------------
" NOTE: Zen mode = DistractionFreeMode + Fullscreen. This has no effect when
" using a tiling manager like SwayVM.
map <leader>dd <Action>(ToggleDistractionFreeMode)
map <leader>dz <Action>(ToggleZenMode)
map <leader>df <Action>(ToggleFullScreen)

let g:WhichKeyDesc_display = "<leader>d Display options"
let g:WhichKeyDesc_zen_mode = "<leader>dz Toggle Zen mode"
let g:WhichKeyDesc_df_mode = "<leader>dd Toggle Distraction-Free mode"
let g:WhichKeyDesc_fullscreen = "<leader>df Toggle full screen"

" Actions -------------------------------------------------
" TODO: Check if we really need this. Default IntelliJ keybindings still work.
map <leader>am <Action>(ShowIntentionActions)
map <leader>as <Action>(SearchEverywhere)

let g:WhichKeyDesc_action= "<leader>a Actions"
let g:WhichKeyDesc_action_context_menu = "<leader>am Open context menu (Alt+Enter)"
let g:WhichKeyDesc_action_search = "<leader>as Search Everywhere (Ctrl+t)"

" File navigation -----------------------------------------
" NOTE: I don't use most of these -> SearchEverywhere is fine for me
map <leader><leader> <Action>(RecentFiles)
" map <leader>ff <Action>(GotoFile)
" map <leader>fr <Action>(RecentFiles)
" map <leader>fc <Action>(FindInPath)
" map <leader>fl <Action>(RecentLocations)

let g:WhichKeyDesc_file_quickLook = "<leader><leader> Recent files"
" let g:WhichKeyDesc_file_nav = "<leader>f File navigation"
" let g:WhichKeyDesc_file_nav_goto_file = "<leader>ff Go to file"
" let g:WhichKeyDesc_file_nav_goto_content = "<leader>fc Search for file content"
" let g:WhichKeyDesc_file_nav_show_recent_files = "<leader>fr Show recent files"
" let g:WhichKeyDesc_file_nav_show_recent_locations = "<leader>fl Show recent locations"

" Close active tab ----------------------------------------
map <leader>q <Action>(CloseContent)

let g:WhichKeyDesc_close_tab = "<leader>q Close active tab"

" Refactoring ---------------------------------------------
map <leader>rr <Action>(RenameElement)
map <leader>rm <Action>(ExtractMethod)
map <leader>rv <Action>(IntroduceVariable)
map <leader>rf <Action>(IntroduceField)
map <leader>rs <Action>(ChangeSignature)
map <leader>rx <Action>(Refactorings.QuickListPopupAction)

let g:WhichKeyDesc_refactoring = "<leader>r Refactoring menu"
let g:WhichKeyDesc_refactoring_rename = "<leader>rr Rename element"
let g:WhichKeyDesc_refactoring_method = "<leader>rm Extract method"
let g:WhichKeyDesc_refactoring_variable = "<leader>rv Introduce variable"
let g:WhichKeyDesc_refactoring_field = "<leader>rf Introduce field"
let g:WhichKeyDesc_refactoring_signature = "<leader>rs Change signature"
let g:WhichKeyDesc_refactoring_all = "<leader>rx Open refactorings list"

" Go to code ----------------------------------------------
nmap <leader>gd <Action>(GotoDeclaration)
nmap <leader>gy <Action>(GotoTypeDeclaration)
nmap <leader>gi <Action>(GotoImplementation)
nmap <leader>gu <Action>(ShowUsages)
nmap <leader>gt <Action>(GotoTest)
nmap <leader>gf <Action>(Back)
nmap <leader>gb <Action>(Forward)

let g:WhichKeyDesc_goto = "<leader>g Go to ..."
let g:WhichKeyDesc_goto_declaration = "<leader>gd Go to Definition"
let g:WhichKeyDesc_goto_type_declaration = "<leader>gy Go to Type Definition"
let g:WhichKeyDesc_goto_implementation = "<leader>gi Go to Implementation"
let g:WhichKeyDesc_goto_usages = "<leader>gu Go to Usages"
let g:WhichKeyDesc_goto_test = "<leader>gt Go to Test"
let g:WhichKeyDesc_goto_back = "<leader>gb Go Back"
let g:WhichKeyDesc_goto_forward = "<leader>gf Go Forward"

" Git windows ---------------------------------------------
map <leader>Gc <Action>(CheckinProject)
map <leader>Gs <Action>(ActivateVersionControlToolWindow)
map <leader>Gb <Action>(Git.Branches)

let g:WhichKeyDesc_git = "<leader>G Git operations"
let g:WhichKeyDesc_git_commit = "<leader>Gc Open Git commit dialog"
let g:WhichKeyDesc_git_status = "<leader>Gs Open Git status dialog"
let g:WhichKeyDesc_git_branches = "<leader>Gb Open Git branches list"

" Errors --------------------------------------------------
map <leader>en <Action>(ReSharperGotoNextErrorInSolution)
map <leader>ep <Action>(ReSharperGotoPrevErrorInSolution)

let g:WhichKeyDesc_errors = "<leader>e Error navigation"
let g:WhichKeyDesc_errors_next = "<leader>en Go to next error in solution"
let g:WhichKeyDesc_errors_prev = "<leader>ep Go to previous error in solution"

" Unit Testing --------------------------------------------
nmap <leader>ur <Action>(RiderUnitTestRunContextAction)
nmap <leader>ud <Action>(RiderUnitTestDebugContextAction)
nmap <leader>ul <Action>(RiderUnitTestRunSolutionAction)

let g:WhichKeyDesc_unit_testing = "<leader>u Unit testing"
let g:WhichKeyDesc_unit_testing_run_test = "<leader>ur Run unit test"
let g:WhichKeyDesc_unit_testing_debug_test = "<leader>ud Debug unit test"
let g:WhichKeyDesc_unit_testing_run_all_tests = "<leader>ul Run all unit tests"

" Reload IdeaVim Config -----------------------------------
nmap <leader>Q <Action>(IdeaVim.ReloadVimRc.reload)

let g:WhichKeyDesc_reload_config = "<leader>Q Reload IdeaVim config"

" TODO
" Collapse Methods
" more collapse functions
" Navigate between IDE windows (Git, Code, Tests)
" Close other IDE windows (Git, Tests, etc)
