"" Inspired by 
"" https://raw.githubusercontent.com/dbilici/IdeaVim/refs/heads/main/.ideavimrc

"" ==============================================
"" Base settings
"" ==============================================
set scrolloff=5
set history=1000
set number relativenumber
set showmode
set showcmd
set smartcase
set incsearch
set hlsearch
set visualbell

" Clipboard Integration
set clipboard+=unnamed

" Leader key
"let mapleader="\<space>"
let mapleader=" "

" Default Behaviour
set gdefault

" IdeaVim specific settings
" https://github.com/JetBrains/ideavim/wiki/set-commands#ideavim-only-options
set ideajoin
" set ideamarks " default is true anyway
" set idearefactormode=normal
" set ideastatusicon=gray

"" ==============================================
"" Plugin settings
"" ==============================================
" commentary
"
" Purpose: Commenting lines and regions.
"
" Usage:
" - gc{motion}: Comment or uncomment lines that {motion} moves over.
" - gcc:        Comment or uncomment [count] lines.
" - {Visual}gc: Comment or uncomment the highlighted lines.
" - gc:         Text object for a comment
" - gcpc / gcu: Uncomment the current and adjacent commented lines.
Plug 'tpope/vim-commentary'

" surround
"
" Purpose: Delete, change, and add "surroundings"
"
" Usage:
" - ds{char}: delete surrounding {char}
" - cs{chars}: change surrounding {chars}
" - ys{motion}{char}: add surrounding {char} to {motion}
"
" Further examples: https://github.com/tpope/vim-surround/blob/3d188ed2113431cf8dac77be61b842acb64433d9/doc/surround.txt
Plug 'tpope/vim-surround'

" nerdtree
"
" Purpose: File navigation in tree view. Replaces default "project explorer"
"
" Usage: see custom mappings below.
Plug 'preservim/nerdtree'

" Searching Plugins -----------------------------

" Sneak
" Requires IdeaVim-Sneak from JetBrains Marketplace
"
" Purpose:
" Behaves similar to 'f|t', except we can search by 2 chars instead of 1 char.
"
" Usage:
" s|S followed by 2 chars
Plug 'justinmk/vim-sneak'

" EasyMotion
" Requires IdeaVim-EasyMotion and AceJump from JetBrains Marketplace
"
" Purpose: Simplify character searching - results are highlighted with easy to
" navigate indicators.
"
" Usage:
" - <ll>f{char}: 

Plug 'easymotion/vim-easymotion'

" Highlighting Plugins --------------------------
Plug 'machakann/vim-highlightedyank'
" should be placed after 'sneak' plugin:
Plug 'joshestein/ideavim-quickscope'
let g:qs_highlight_on_keys = ['f', 'F', 't', 'T']

" Which-key settings
" Requires Which-Key plugin from JetBrains Marketplace
Plug 'TheBlob42/idea-which-key'
set notimeout

"" ========================================================
"" Key Mappings
"" ========================================================
" Tab navigation
" nmap <C-p> <Action>(PreviousTab)
" nmap <C-n> <Action>(NextTab)
" sethandler <C-p> a:vim
" sethandler <C-n> a:vim
" 
" " Pane navigation
" nnoremap <C-h> <C-w>h
" nnoremap <C-l> <C-w>l
" nnoremap <C-k> <C-w>k
" nnoremap <C-j> <C-w>j
" sethandler <C-h> a:vim
" sethandler <C-l> a:vim
" sethandler <C-k> a:vim
" sethandler <C-j> a:vim
" 
" " Navigation actions
" nmap <C-i> <Action>(Back)
" nmap <C-o> <Action>(Forward)
" sethandler <C-i> a:vim
" sethandler <C-o> a:vim
" 
" " Jump between methods
" nmap [[ <Action>(MethodUp)
" nmap ]] <Action>(MethodDown)
" 
" " Visual indentation
" vnoremap < <gv
" vnoremap > >gv
" 
" " IDE interaction
nmap <C-m> <Action>(ShowPopupMenu)
nmap <C-S-m> <Action>(ToolWindowsGroup)
sethandler <C-m> a:vim
sethandler <C-S-m> a:vim

"" ========================================================
"" Leader Commands
"" ========================================================

" EasyMotion
let g:WhichKeyDesc_easymotion = "<leader><leader> EasyMotion"

" Window splits
nmap <leader>wv <action>(SplitVertically)
nmap <leader>wh <action>(SplitHorizontally)
nmap <leader>wu <action>(Unsplit)
nmap <leader>wm <action>(MoveEditorToOppositeTabGroup)
nmap <leader>wb <action>(Back)
nmap <leader>wf <action>(Forward)
let g:WhichKeyDesc_window = "<leader>w Window splits"
let g:WhichKeyDesc_window_split_vertically = "<leader>wv Split vertically"
let g:WhichKeyDesc_window_split_horizontally = "<leader>wh Split horizontally"
let g:WhichKeyDesc_window_split_unsplit = "<leader>wu Unsplit"
let g:WhichKeyDesc_window_split_move_editor = "<leader>wm Move editor to opposite tab group"
let g:WhichKeyDesc_window_split_back = "<leader>wb Back split"
let g:WhichKeyDesc_window_split_forward = "<leader>wf Forward split"


" Tab Navigation and Management
nmap <leader>tP <Action>(PinActiveEditorTab)
nmap <leader>tg1 <Action>(GoToTab1)
nmap <leader>tg2 <Action>(GoToTab2)
nmap <leader>tg3 <Action>(GoToTab3)
nmap <leader>tg4 <Action>(GoToTab4)
nmap <leader>tg5 <Action>(GoToTab5)
nmap <leader>tg6 <Action>(GoToTab6)
nmap <leader>tg7 <Action>(GoToTab7)
nmap <leader>tg8 <Action>(GoToTab8)
nmap <leader>tg9 <Action>(GoToTab9)
nmap <leader>tx <Action>(CloseContent)
nmap <leader>tX <Action>(CloseAllEditors)
nmap <leader>to <Action>(CloseAllEditorsButActive)
nmap <leader>ta <Action>(CloseAllUnpinnedEditors)
let g:WhichKeyDesc_tabs = "<leader>t Tabs"
let g:WhichKeyDesc_tabs_pin = "<leader>tP Pin Active Tab"
let g:WhichKeyDesc_tabs_go_to = "<leader>tg Go to Tab"
let g:WhichKeyDesc_tabs_go_to_1 = "<leader>tg1 Go to Tab 1"
let g:WhichKeyDesc_tabs_go_to_2 = "<leader>tg2 Go to Tab 2"
let g:WhichKeyDesc_tabs_go_to_3 = "<leader>tg3 Go to Tab 3"
let g:WhichKeyDesc_tabs_go_to_4 = "<leader>tg4 Go to Tab 4"
let g:WhichKeyDesc_tabs_go_to_5 = "<leader>tg5 Go to Tab 5"
let g:WhichKeyDesc_tabs_go_to_6 = "<leader>tg6 Go to Tab 6"
let g:WhichKeyDesc_tabs_go_to_7 = "<leader>tg7 Go to Tab 7"
let g:WhichKeyDesc_tabs_go_to_8 = "<leader>tg8 Go to Tab 8"
let g:WhichKeyDesc_tabs_go_to_9 = "<leader>tg9 Go to Tab 9"
let g:WhichKeyDesc_tabs_close = "<leader>tx Close Current Tab"
let g:WhichKeyDesc_tabs_close_all = "<leader>tX Close All Tabs"
let g:WhichKeyDesc_tabs_close_all_but_active = "<leader>to Close All Tabs But Active"
let g:WhichKeyDesc_tabs_close_all_unpinned = "<leader>ta Close All Unpinned Tabs"


" Display options
map <leader>Dd <action>(ToggleDistractionFreeMode)
map <leader>Dz <action>(ToggleZenMode)
map <leader>Df <action>(ToggleFullScreen)
let g:WhichKeyDesc_display = "<leader>D Display options"
let g:WhichKeyDesc_zen_mode = "<leader>Dz Toggle Zen mode"
let g:WhichKeyDesc_df_mode = "<leader>Dd Toggle Distraction-Free mode"
let g:WhichKeyDesc_fullscreen = "<leader>Df Toggle full screen"


" File navigation
nmap <leader>fg <Action>(GotoFile)
nmap <leader>fr <Action>(RecentFiles)
nmap <leader>fc <Action>(FindInPath)
nmap <leader>fl <Action>(RecentLocations)
nmap <leader>fs <Action>(NewScratchFile)
nmap <leader>fe :NERDTreeToggle<CR>
nmap <leader>fo <Action>(OpenFile)
nmap <leader>fy <Action>(CopyAbsolutePath)
nmap <leader>fp <Action>(ManageRecentProjects)
nmap <leader>fh <Action>(LocalHistory.ShowHistory)
nmap <leader>ff <Action>(ShowFilePath)
nmap <leader>fi <Action>(SelectIn)
nmap <leader>fp <Action>(ReplaceInPath)
let g:WhichKeyDesc_file_opt = "<leader>f File navigation"
let g:WhichKeyDesc_file_opt_goto_file = "<leader>fg Go To File"
let g:WhichKeyDesc_file_opt_goto_content = "<leader>fc Find In Files"
let g:WhichKeyDesc_file_opt_show_recent_files = "<leader>fr Recent Files"
let g:WhichKeyDesc_file_opt_show_recent_locations = "<leader>fl Recent Locations"
let g:WhichKeyDesc_file_opt_new_scratch_file = "<leader>fs New Scratch File"
let g:WhichKeyDesc_file_opt_toggle_nerdtree = "<leader>fe Toggle NERDTree"
let g:WhichKeyDesc_file_opt_open_file = "<leader>fo Open File"
let g:WhichKeyDesc_file_opt_copy_path = "<leader>fy Copy Absolute Path"
let g:WhichKeyDesc_file_opt_recent_projects = "<leader>fp Manage Recent Projects"
let g:WhichKeyDesc_file_opt_history = "<leader>fh Show Local History"
let g:WhichKeyDesc_file_opt_show_path = "<leader>ff Show File Path"
let g:WhichKeyDesc_file_opt_select_in = "<leader>fi Select In"
let g:WhichKeyDesc_file_opt_replace_in_path = "<leader>fp Replace In Path"


" Search
" nmap <leader>sS <action>(SearchEverywhere)
" nmap <leader>su <Action>(FindUsages)
" nmap <leader>sn <Action>(ShowNavBar)
" nmap <leader>sa <Action>(GotoAction)
" nmap <leader>sc <Action>(GotoClass)
" nmap <leader>sf <Action>(GotoFile)
" nmap <leader>ss <Action>(GotoSymbol)
" nmap <leader>st <Action>(TextSearchAction)
" let g:WhichKeyDesc_search = "<leader>s Search"
" let g:WhichKeyDesc_search_everywhere = "<leader>sS Search Everywhere"
" let g:WhichKeyDesc_search_usages = "<leader>su Find Usages"
" let g:WhichKeyDesc_search_nav_bar = "<leader>sn Show Nav Bar"
" let g:WhichKeyDesc_search_action = "<leader>sa Search Action"
" let g:WhichKeyDesc_search_class = "<leader>sc Search Class"
" let g:WhichKeyDesc_search_file = "<leader>sf Search File"
" let g:WhichKeyDesc_search_symbol = "<leader>ss Search Symbol"
" let g:WhichKeyDesc_search_text = "<leader>st Search Text"

" Rider: Unit Testing
set notimeout
nmap <leader>ur <Action>(RiderUnitTestRunContextAction)
nmap <leader>ud <Action>(RiderUnitTestDebugContextAction)
let g:WhichKeyDesc_unit_test_run = "<leader>ur Run test"
let g:WhichKeyDesc_unit_test_debug = "<leader>ud Debug test"
